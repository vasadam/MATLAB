colNames = {'datetime',...
            'elevation',...
            'P',...
            'Te',...
            'E',...
            'd1P1h',...
            'd1P3h',...
            'd1P6h',...
            'd1P9h',...
            'd1P12h',...
            'd1P24h',...
            'd1Te1h',...
            'd1Te3h',...
            'd1Te6h',...
            'd1Te9h',...
            'd1Te12h',...
            'd1Te24h',...
            'd2P1h',...
            'd2P3h',...
            'd2P6h',...
            'd2P9h',...
            'd2P12h',...
            'd2P24h',...
            'd2Te1h',...
            'd2Te3h',...
            'd2Te6h',...
            'd2Te9h',...
            'd2Te12h',...
            'd2Te24h',...
            'd3P1h',...
            'd3P3h',...
            'd3P6h',...
            'd3P9h',...
            'd3P12h',...
            'd3P24h',...
            'd3Te1h',...
            'd3Te3h',...
            'd3Te6h',...
            'd3Te9h',...
            'd3Te12h',...
            'd3Te24h',...
            'd4P1h',...
            'd4P3h',...
            'd4P6h',...
            'd4P9h',...
            'd4P12h',...
            'd4P24h',...
            'd4Te1h',...
            'd4Te3h',...
            'd4Te6h',...
            'd4Te9h',...
            'd4Te12h',...
            'd4Te24h'};

ISAPressure = 1013.25;  % pressure of International Standard Atmosphere at mean sea level (hPa)
ISAEquivalentTemperature = 288.15;  % temperature of International Standard Atmosphere at mean sea level (K)
oneSigmaCI = normcdf(1) - normcdf(-1);  % confidence interval value for +-(sigma)
newline = java.lang.System.getProperty('line.separator');
ft = fittype('poly1');
months_of_seasons = containers.Map;
months_of_seasons('winter') = [12 1 2];
months_of_seasons('spring') = [3 4 5];
months_of_seasons('summer') = [6 7 8];
months_of_seasons('autumn') = [9 10 11];
rootDir = 'D:\NOAA\ISD_stat_tend_bin';
destDir = 'D:\NOAA\ISD_stat_tend_regr_per_season';
stationDirs = dir(rootDir);
parfor i=1:size(stationDirs,1)
    if (strcmp(stationDirs(i).name,'.') || strcmp(stationDirs(i).name,'..'))  % Skip '.' and '..'
        continue;
    end     
    
    hourFiles = dir(fullfile(rootDir,stationDirs(i).name));
    for j=1:size(hourFiles,1)
        if (strcmp(hourFiles(j).name,'.') || strcmp(hourFiles(j).name,'..'))  % Skip '.' and '..'
            continue;
        end      
        
        %% Load .mat file containing dataArray
        dataArray = load(fullfile(rootDir,stationDirs(i).name,hourFiles(j).name),'-mat');
        dataArray = dataArray.var;

        %% Allocate imported array to column variable names
        dt = dataArray{:, 1};
        mon = month(dt);
        E = dataArray{:, 5};             
        fileNameParts = strsplit(hourFiles(j).name,'.');
        hour = fileNameParts{1};          
        
        regrs = containers.Map('KeyType','char','ValueType','any');
        %% Calculate correlation coefficients    
        for k=1:size(dataArray,2)            
            % Skip datetime, elevation and E
            if (k==1 || k==2 || k==5)
                continue;
            end            
            [stationDirs(i).name ' ' hourFiles(j).name ' ' num2str(k)]
            
            values = dataArray{:,k};
            if (~isempty(values(~isnan(values))))
                %% same-day correlation coefficient
                for season = keys(months_of_seasons)                
                    condition = ~isnan(values) & ismember(mon,months_of_seasons(char(season))); 
                    key = [char(season),' ',num2str(k),' ','0'];
                    if (size(values(condition),1) > 2)
                        if (strcmp(colNames{k},'P'))
                            values(condition) = values(condition) - ISAPressure;
                        elseif (strcmp(colNames{k},'Te'))
                            values(condition) = values(condition) - ISAEquivalentTemperature;
                        end
                        fitResult = fit(values(condition), E(condition), ft);
                        coeffs = coeffvalues(fitResult);
                        CIValues = confint(fitResult, oneSigmaCI);
                        regrs(key) = [coeffs(1), coeffs(2), (CIValues(2,1) - CIValues(1,1)) / 2, (CIValues(2,2) - CIValues(1,2)) / 2];  % a,b,sigma(a),sigma(b)
                    else
                        regrs(key) = [NaN, NaN, NaN, NaN];
                    end
                end    
                %% previous-days correlation coefficients
                for d=-1:-1:-5
                    month_tmp = [];
                    prev_values_tmp = [];
                    E_tmp = [];
                    n=0;   
                    for q=(1-d):size(E)
                        % check if previous day measurement is available    
                        for r=q-1:-1:1
                            hourDiff = hours(dt(r) - dt(q));    
                            if (hourDiff < d*24)
                                break;
                            end
                            % If available (and not NaN), store E and
                            % measurement in another array
                            if (hourDiff == d*24)
                                if (isnan(values(r)))
                                    break;
                                end
                                n=n+1;
                                month_tmp(n) = mon(q);
                                E_tmp(n) = E(q);
                                prev_values_tmp(n) = values(r);
                                break;
                            end
                        end                        
                    end   
                    % Convert row vectors to column vectors
                    E_tmp = E_tmp';
                    prev_values_tmp = prev_values_tmp';
                    
                    % per-season previous-day correlation coefficients
                    for season = keys(months_of_seasons)
                        condition = ismember(month_tmp,months_of_seasons(char(season)));  
                        key = [char(season),' ',num2str(k),' ',num2str(d)];
                        if (size(E_tmp(condition),1) > 2)           
                            fitResult = fit(prev_values_tmp(condition), E_tmp(condition), ft);
                            coeffs = coeffvalues(fitResult);
                            CIValues = confint(fitResult, oneSigmaCI);
                            regrs(key) = [coeffs(1), coeffs(2), (CIValues(2,1) - CIValues(1,1)) / 2, (CIValues(2,2) - CIValues(1,2)) / 2];  % a,b,sigma(a),sigma(b)
                        else
                            regrs(key) = [NaN, NaN, NaN, NaN];
                        end
                    end                    
                end                
            else
                % If column is empty, set all coefficients to NaN
                for d=0:-1:-5
                    for season = keys(months_of_seasons)
                        key = [char(season),' ',num2str(k),' ',num2str(d)];
                        regrs(key) = [NaN, NaN, NaN, NaN];
                    end
                end                
            end
        end
        
        %% Write corr,pval values to file
        mkdir(fullfile(destDir,stationDirs(i).name));
        hourFile = fopen(fullfile(destDir,stationDirs(i).name,strrep(hourFiles(j).name,'bin','txt')),'w');
        for season = keys(months_of_seasons)
            for k=1:size(dataArray,2)            
                % Skip datetime, elevation and E
                if (k==1 || k==2 || k==5)
                    continue;
                end
                for d=0:-1:-5
                    regrValues = regrs([char(season),' ',num2str(k),' ',num2str(d)]);
                    fprintf(hourFile,'%s',[char(season),...
                                           ',',...
                                           char(colNames{:, k}),...
                                           ',',...
                                           num2str(d),...
                                           ',',...                                       
                                           num2str(regrValues(1)),...
                                           ',',...                                       
                                           num2str(regrValues(2)),...
                                           ',',...                                       
                                           num2str(regrValues(3)),...
                                           ',',...                                       
                                           num2str(regrValues(4)),...                                           
                                           char(newline)]);
                end 
            end
        end
        fclose(hourFile); 
    end
end
